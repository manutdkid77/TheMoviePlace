// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TheMoviePlace.Entities;

namespace TheMoviePlace.Migrations
{
    [DbContext(typeof(TheMoviePlaceDBContext))]
    partial class TheMoviePlaceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TheMoviePlace.Entities.GenderReference", b =>
                {
                    b.Property<int>("GenderReferenceID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("GenderReferenceID");

                    b.ToTable("GenderReferences");
                });

            modelBuilder.Entity("TheMoviePlace.Entities.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Plot")
                        .HasMaxLength(255);

                    b.Property<string>("Poster")
                        .HasMaxLength(50);

                    b.Property<DateTime>("YearOfRelease");

                    b.HasKey("MovieID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("TheMoviePlace.Entities.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("GenderReferenceID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PersonID");

                    b.HasIndex("GenderReferenceID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TheMoviePlace.Entities.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieID");

                    b.Property<int>("PersonID");

                    b.Property<int>("RoleReferenceID");

                    b.HasKey("RoleID");

                    b.HasIndex("MovieID");

                    b.HasIndex("PersonID");

                    b.HasIndex("RoleReferenceID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TheMoviePlace.Entities.RoleReference", b =>
                {
                    b.Property<int>("RoleReferenceID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("RoleReferenceID");

                    b.ToTable("RoleReferences");
                });

            modelBuilder.Entity("TheMoviePlace.Entities.Person", b =>
                {
                    b.HasOne("TheMoviePlace.Entities.GenderReference", "GenderReference")
                        .WithMany()
                        .HasForeignKey("GenderReferenceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheMoviePlace.Entities.Role", b =>
                {
                    b.HasOne("TheMoviePlace.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheMoviePlace.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheMoviePlace.Entities.RoleReference", "RoleReference")
                        .WithMany()
                        .HasForeignKey("RoleReferenceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
